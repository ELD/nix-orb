version: 2.1
setup: true
orbs:
  orb-tools: circleci/orb-tools@11.1.2
  shellcheck: circleci/shellcheck@3.1
  rust: circleci/rust@1.6.0

executors:
  linux:
    docker:
      - image: cimg/base:stable
  linux-machine:
    machine:
      image: ubuntu-2004:202111-02
  macos:
    macos:
      xcode: 13.3.0

workflows:
  lint-pack:
    jobs:
      - test-scripts:
          matrix:
            parameters:
              os: [linux-machine, macos]
          filters:
            tags:
              only: /.*/
      # - build-scripts:
      #     matrix:
      #       parameters:
      #         os: [linux-machine, macos]
      #     filters:
      #       tags:
      #         only: /.*/
      # - copy-scripts:
      #     filters:
      #       tags:
      #         only: /.*/
      - orb-tools/lint:
          filters:
            tags:
              only: /.*/
      - orb-tools/pack:
          filters:
            tags:
              only: /.*/
      - orb-tools/review:
          filters:
            tags:
              only: /.*/
      - shellcheck/check:
          exclude: SC2148,SC2038,SC2086,SC2002,SC2016
      - orb-tools/publish:
          orb-name: eld/cachix
          requires:
            [
              test-scripts,
              orb-tools/lint,
              orb-tools/review,
              orb-tools/pack,
              shellcheck/check,
            ]
          vcs-type: << pipeline.project.type >>
          # Use a context to hold your publishing token.
          context: orb-publishing
      # Triggers the next workflow in the Orb Development Kit.
      - orb-tools/continue:
          pipeline-number: << pipeline.number >>
          vcs-type: << pipeline.project.type >>
          requires: [orb-tools/publish]

jobs:
  test-scripts:
    parameters:
      os:
        description: "executor to run the job against"
        type: executor
        default: linux
    executor: << parameters.os >>
    steps:
      - checkout
      - rust/install:
          name: "Install Rust toolchain"
      - rust/test:
          name: "Test xshell scripts"

  # TODO: Create a script to install nix on Linux _and_ macOS; don't use the default Docker image
  build-scripts:
    parameters:
      os:
        description: "executor to run the job against"
        type: executor
        default: linux
    executor: << parameters.os >>
    steps:
      - checkout
      - run:
          name: "Add Default Channel"
          command: |
            mkdir -p /etc/nix /root
            echo "sandbox = false" >> /etc/nix/nix.conf
            nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs
            nix-channel --update
      - run:
          name: "Install Rust"
          command: |
            nix-env -iA nixpkgs.rustup nixpkgs.gcc
            rustup install stable
      - run:
          name: "Build xshell scripts"
          command: cargo build --release
