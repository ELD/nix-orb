version: 2.1
setup: true
orbs:
  orb-tools: circleci/orb-tools@11.1.2
  shellcheck: circleci/shellcheck@3.1
  rust: circleci/rust@1.6.0

executors:
  linux: &linux
    docker:
      - image: cimg/base:stable
  linux-machine: &linux-machine
    machine:
      image: ubuntu-2004:202101-01
  macos: &macos
    macos:
      xcode: 13.3.0

workflows:
  lint-pack:
    jobs:
      - test-scripts:
          matrix:
            parameters:
              os: [linux-machine, macos]
          filters:
            tags:
              only: /.*/
      - build-scripts:
          matrix:
            parameters:
              os: [linux-machine, macos]
          filters:
            tags:
              only: /.*/
          requires: [test-scripts]
      # - copy-scripts:
      #     filters:
      #       tags:
      #         only: /.*/
      #     requires: [build-scripts]
      - orb-tools/lint:
          filters:
            tags:
              only: /.*/
      - orb-tools/pack:
          filters:
            tags:
              only: /.*/
      - orb-tools/review:
          filters:
            tags:
              only: /.*/
      - shellcheck/check:
          exclude: SC2148,SC2038,SC2086,SC2002,SC2016
      - orb-tools/publish:
          orb-name: eld/cachix
          requires:
            [
              build-scripts,
              orb-tools/lint,
              orb-tools/review,
              orb-tools/pack,
              shellcheck/check,
            ]
          vcs-type: << pipeline.project.type >>
          # Use a context to hold your publishing token.
          context: orb-publishing
      # Triggers the next workflow in the Orb Development Kit.
      - orb-tools/continue:
          pipeline-number: << pipeline.number >>
          vcs-type: << pipeline.project.type >>
          requires: [orb-tools/publish]

jobs:
  test-scripts:
    parameters:
      os:
        description: "executor to run the job against"
        type: executor
        default: linux
    executor: << parameters.os >>
    steps:
      - checkout
      - rust/install
      - rust/test:
          with_cache: false

  # TODO: Create a script to install nix on Linux _and_ macOS; don't use the default Docker image
  build-scripts:
    parameters:
      os:
        description: "executor to run the job against"
        type: executor
        default: linux
    executor: << parameters.os >>
    steps:
      - checkout
      - rust/install
      - when:
          condition:
            or:
            - equal: [*linux, << parameters.os >>]
            - equal: [*linux-machine, << parameters.os >>]
          steps:
            - run:
                name: "Add Linux musl target and required build tools"
                command: |
                  rustup target add x86_64-unknown-linux-musl
                  sudo apt-get install -y musl-tools
            - run:
                name: "Build for musl (static binary)"
                command: cargo build --release --target=x86_64-unknown-linux-musl
            - run:
                name: "Test Invocation"
                command: |
                  echo $(tty)
                  target/x86_64-unknown-linux-musl/release/install-nix
      - when:
          condition:
            or:
            - equal: [*macos, << parameters.os >>]
          steps:
            - rust/build:
                release: true
                with_cache: false
